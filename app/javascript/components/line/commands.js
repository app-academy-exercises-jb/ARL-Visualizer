import React from 'react'
import Line from "./line"
import { getData } from "../../utils/utils"

// TODO: interpret `literals` as commands to parse
export const Echo = async (input) => (await <div>{input.join(" ")}</div>)

export const Help = async (input) => (await <div>
  ARL Visualizer pseudo-CLI: version 0.1.0 <br></br><br></br>
  This is the help message, sorry it's so unhelpful. Arrow keys will show command history. These are the currently supported internal commands: <br></br>
  help -- display this help message <br></br>
  echo -- display a line of text <br></br>
  clear -- clears the terminal <br></br>
  pwd -- display current location of server <br></br>
  classes -- display classes generated by ARL <br></br> <br></br>
  You can also use any of the generated classes with any of the following query methods concatenated Rails style. Eg: User.all.where(id: 5) <br></br>
  <table>
    <tbody>
      <tr>
        <td>all</td>
        <td>where</td>
        <td>limit</td>
      </tr>
      <tr>
        <td>find_by</td>
        <td>select</td>
        <td>joins</td>
      </tr>
    </tbody>
  </table> <br></br>
  NB: You can try just a class name to see all the available query methods for it.
  </div>)

export const Clear = async (input) => (
  await function () { this.props.clearLines() }
)

export const Pwd = async (input) => (await <div>{window.origin}</div>)

export const Query = async () => {
  return await function(input) {
    getData({input})
      .then(res => {
        this.setState({ response: JSON.stringify(res, null, 1) })
      }).catch(err => {
        this.setState({ response: JSON.stringify(err.toString()) })
      });
  };
}